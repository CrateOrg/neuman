#!/bin/sh
# shellcheck disable=SC2009

set -e

error() {
    echo "Error: $1" >&2
    exit 1
}

get_json_value() {
    # Use jq to extract the value for the given key
    echo "$JSON_DATA" | jq -r ".$1 // empty"
}

json_to_env() {
    # Convert JSON data to environment variables
    echo "$1" | jq -r \
        'to_entries[] | "export \(.key | ascii_upcase)=\"\(.value)\""'
}

# help
if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    man neuman.1 || ronn -r <README.md | man -l -
    exit 0
fi

# read json data
readonly JSON_FILE="$1"
[ -z "$JSON_FILE" ] && error "No JSON input file provided"
[ -f "$JSON_FILE" ] || error "JSON input file not found"
readonly JSON_DATA=$(cat "$JSON_FILE") ||
    error "Failed to read data from $JSON_FILE"

# abort if input is empty
[ -z "$JSON_DATA" ] && error "No JSON data provided"

# Ensure no dangerous characters are present
# shellcheck disable=SC2016
if echo "$JSON_DATA" | grep -q '[;&|<>`$()]='; then
    error "Forbidden shell metacharacters in JSON data"
fi

# validate json data
if ! echo "$JSON_DATA" | jq empty; then
    error "Invalid JSON format"
fi

# validate spaces
if echo "$JSON_DATA" | jq -r '.. | objects | keys[]' | grep -q ' '; then
    error "Spaces in JSON keys are not allowed"
fi

# get the variable "host" from json
readonly TARGET_REMOTE=$(get_json_value "remote")
[ -z "$TARGET_REMOTE" ] && error "Missing required field 'remote' in JSON data"
readonly TARGET_BOT=$(get_json_value "bot")
[ -z "$TARGET_BOT" ] && error "Missing required field 'bot' in JSON data"
readonly TARGET_CLOSE=$(get_json_value "close")
readonly JSON_ENV=$(get_json_value "env")
readonly JSON_MEMORY=$(get_json_value "memory")

# strip 'rdp:' and 'vnc:' from the host
readonly TARGET_HOST=$(echo "$TARGET_REMOTE" |
    sed -e 's|^rdp:||g' -e 's|^vnc:||g')
[ -z "$TARGET_HOST" ] && error "Missing host in remote address"

# export variables
readonly LIST_ENV=$(echo "$JSON_ENV" | jq -r 'keys_unsorted'[])
if [ -n "$JSON_ENV" ]; then
    for j in $LIST_ENV; do
        UPPER_CASE_VAR=$(echo "$j" | tr '[:lower:]' '[:upper:]')
        echo "Set bot env: $UPPER_CASE_VAR"
    done
    readonly ENV_SOURCE="/dev/shm/neuman-remote-env"
    rm -f "$ENV_SOURCE"
    touch "$ENV_SOURCE"
    chmod 600 "$ENV_SOURCE"
    json_to_env "$JSON_ENV" >>"$ENV_SOURCE"
    # shellcheck disable=SC1090
    . "${ENV_SOURCE}" || error "Failed to source variables from $ENV_SOURCE"
    rm -f "$ENV_SOURCE"
fi

# set neuman memory
readonly MEMORY=$(echo "$JSON_MEMORY" |
    jq -r 'to_entries[] | "\(.key)=\(.value)"' | sed "s| |@@@|g")
if [ -n "$MEMORY" ]; then
    for i in $MEMORY; do
        # get the key and value
        KEY=$(echo "$i" | cut -d'=' -f1 | sed "s|@@@| |g")
        VALUE=$(echo "$i" | cut -d'=' -f2- | sed "s|@@@| |g")
        # check if the key is empty
        [ -z "$KEY" ] && error "Empty key in memory data"
        # check if the value is empty
        [ -z "$VALUE" ] && error "Empty value for key '$KEY' in memory data"
        # set the variable with the key name
        echo "Set bot memory: $KEY"
        neuman --set "$KEY" "$VALUE"
    done
fi

# check if the host is reachable
if ! ping -W2 -c1 "$TARGET_HOST" >/dev/null; then
    error "Failed to reach $TARGET_HOST"
fi

# open remote desktop
autokiosk "$TARGET_REMOTE"

# start bot
neuman "$TARGET_BOT"

# close the remote desktop
if [ "$TARGET_CLOSE" = "true" ]; then
    autokiosk --close "$TARGET_REMOTE"
fi
